// Javscript Operator
// Diffrent Type of js operator 

// 1. Assignment Operator :- +, +=, -=, *=, /=, %=

let x = 5;
x = x + 11; // x+= 5;
x = x - 13; // x-= 2;
x = x * 2; //  x*= 5;
x = x / 3; // x/= 2;
x = x % 2; //  x%= 3;      
           
            
// Js Arithmatic Operato :- +, -, *, /, %, 

let num1 = 10;
let num2 = 5;
let add = num1 + num2;
let diffrent = num1 - num2;
let multiplication = num1 * num2;
let division = num1 / num2;
let modulus = num1 % num2;
console.log(add, diffrent, multiplication, division, modulus);

// Comparative OPerator :- ==, !=, >, <, >=, <=

/* 
তুলনামূলক অপারেটর হচ্ছে এমন অপারেটর যারা দুটি মানের মধ্যে তুলনা করে। জাভাস্ক্রিপ্টের কিছু তুলনামূলক অপারেটর হলো:

1. **Equal (==):** এই অপারেটর ব্যবহার করে দুই মানের সমান হলে সত্য (true) হবে। উদাহরণ: `5 == 5` এর মান সত্য।

2. **Not Equal (!=):** এই অপারেটর ব্যবহার করে দুই মানের সমান না হলে সত্য (true) হবে। উদাহরণ: `5 != 10` এর মান সত্য।

3. **Strict Equal (===):** এই অপারেটর ব্যবহার করে দুই মানের মান এবং ডেটাটাইপ সমান হলে সত্য (true) হবে। উদাহরণ: `5 === '5'` এর মান মিথ্যা।

4. **Strict Not Equal (!==):** এই অপারেটর ব্যবহার করে দুই মানের মান এবং ডেটাটাইপ সমান না হলে সত্য (true) হবে। উদাহরণ: `5 !== '5'` এর মান সত্য।

5. **Greater Than (>):** এই অপারেটর ব্যবহার করে প্রথম মান দ্বিতীয় মানের চেয়ে বড় হলে সত্য (true) হবে। উদাহরণ: `10 > 5` এর মান সত্য।

6. **Less Than (<):** এই অপারেটর ব্যবহার করে প্রথম মান দ্বিতীয় মানের চেয়ে কম হলে সত্য (true) হবে। উদাহরণ: `5 < 10` এর মান সত্য।

7. **Greater Than or Equal (>=):** এই অপারেটর ব্যবহার করে প্রথম মান দ্বিতীয় মানের চেয়ে বড় অথবা সমান হলে সত্য (true) হবে। উদাহরণ: `10 >= 10` এর মান সত্য।

8. **Less Than or Equal (<=):** এই অপারেটর ব্যবহার কর

ে প্রথম মান দ্বিতীয় মানের চেয়ে কম অথবা সমান হলে সত্য (true) হবে। উদাহরণ: `5 <= 10` এর মান সত্য।

এই তুলনামূলক অপারেটরগুলি ব্যবহার করে প্রোগ্রাম লেখা ও শর্তাদি বিবেচনা করা সম্ভব। */

// Js Logical OPerator : &&, ||, !

/* 
লজিক্যাল অপারেটর হচ্ছে সেই অপারেটরগুলো যা বিভিন্ন লজিক্যাল অপারেশন পারফর্ম করে। জাভাস্ক্রিপ্টে কিছু লজিক্যাল অপারেটর হলো:

1. **একাধিক (&&):** এই অপারেটর ব্যবহার করে যদি সমস্ত প্রতিটি শর্ত সত্য (true) হয়, তবে সম্পূর্ণ অভিব্যক্তিটি সত্য (true) হবে। উদাহরণ: `আগের_সংখ্যা > 0 && আগের_সংখ্যা < 10` এর মান সত্য হলেই সম্পূর্ণ অভিব্যক্তি সত্য হবে।

2. **অথবা (||):** এই অপারেটর ব্যবহার করে যদি যেকোনো একটি শর্ত সত্য (true) হয়, তবে সম্পূর্ণ অভিব্যক্তিটি সত্য (true) হবে। উদাহরণ: `প্রথম_সংখ্যা < 0 || দ্বিতীয়_সংখ্যা > 10` এর মান সত্য হলেই সম্পূর্ণ অভিব্যক্তি সত্য হবে।

3. **নয় (!):** এই অপারেটর ব্যবহার করে বর্তমান লজিক্যাল স্টেটমেন্টটি উল্টাতে ব্যবহার করা যায়। উদাহরণ: `!প্রথম_সংখ্যা > 0` এর মান সত্য না হলেই সম্পূর্ণ অভিব্যক্তি সত্য হবে।

লজিক্যাল অপারেটর ব্যবহার করে প্রোগ্রাম লেখার সময় বিভিন্ন শর্তাদি পরিস্থিতিতে বিভিন্ন প্রোগ্রাম লজিক বিবেচনা করা সম্ভব। */

// Js Type of OPerator

console.log(typeof num1);

let myName = 'Young Coder Mosharof Hossain';
console.log(typeof myName);

// Instance of OPerator 

/* 
`instanceof` অপারেটরটি জাভাস্ক্রিপ্টে ব্যবহৃত হয় অবজেক্টটি কোন কনস্ট্রাক্টর ফাংশনের ইন্সট্যান্স তা চেক করতে। এটি একটি বুলিয়ান মান ফেরত দেয়।

এটির ব্যবহার নিম্নলিখিত উদাহরণে পরিবর্তন হতে পারে:

```javascript
// একটি অবজেক্ট তৈরি করা
let গাড়ি = new Car();

// অবজেক্টটি Car কনস্ট্রাক্টরের ইন্সট্যান্স কিনা চেক করা
let কি_গাড়ি = গাড়ি instanceof Car;
// যদি গাড়ি অবজেক্ট Car কনস্ট্রাক্টরের ইন্সট্যান্স হয়, তবে কি_গাড়ি মান হবে true
```

এখানে, `গাড়ি instanceof Car` এই অংশটি কোন অবজেক্ট Car কনস্ট্রাক্টরের ইন্সট্যান্স হয় কিনা চেক করে। যদি গাড়ি অবজেক্ট Car কনস্ট্রাক্টরের ইন্সট্যান্স হয়, তবে মনে হবে true, অন্যথায় false। */

